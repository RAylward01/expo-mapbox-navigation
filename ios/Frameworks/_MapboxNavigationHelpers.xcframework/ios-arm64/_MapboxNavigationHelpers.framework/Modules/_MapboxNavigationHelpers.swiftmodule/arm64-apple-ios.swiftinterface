// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name _MapboxNavigationHelpers
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Foundation.URL {
  public static func mapboxApiEndpoint() -> Foundation.URL
}
final public class AsyncStreamBridge<Element> {
  public init(bufferingPolicy: _Concurrency.AsyncStream<Element>.Continuation.BufferingPolicy = .unbounded)
  @objc deinit
  final public func yield(_ value: Element)
  final public func finish()
}
extension _MapboxNavigationHelpers.AsyncStreamBridge : _Concurrency.AsyncSequence {
  final public func makeAsyncIterator() -> _Concurrency.AsyncStream<Element>.AsyncIterator
  public typealias AsyncIterator = _Concurrency.AsyncStream<Element>.AsyncIterator
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = _Concurrency.AsyncStream<Element>.Iterator.__AsyncIteratorProtocol_Failure
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = _Concurrency.AsyncStream<Element>.Iterator.__AsyncIteratorProtocol_Failure
  #endif
}
extension _MapboxNavigationHelpers.AsyncStreamBridge : Swift.Sendable where Element : Swift.Sendable {
}
extension _MapboxNavigationHelpers.AsyncStreamBridge where Element == () {
  final public func yield()
}
extension _Concurrency.MainActor {
  @discardableResult
  @_unavailableFromAsync(message: "await the call to the @MainActor closure directly") public static func assumingIsolated<T>(_ operation: @_Concurrency.MainActor () throws -> T, file: Swift.StaticString = #fileID, line: Swift.UInt = #line) rethrows -> T
}
extension Foundation.URLSessionTask : _MapboxNavigationHelpers.CancellableAsyncStateValue {
}
@available(iOS, deprecated: 15.0, message: "Use iOS 15 API instead.")
extension Foundation.URLSession {
  public func data(from url: Foundation.URL) async throws -> (data: Foundation.Data, response: Foundation.URLResponse)
  public func data(for request: Foundation.URLRequest) async throws -> (data: Foundation.Data, response: Foundation.URLResponse)
  public func download(with request: Foundation.URLRequest) async throws -> (cacheUrl: Foundation.URL, response: Foundation.URLResponse)
}
public protocol CancellableAsyncStateValue {
  func cancel()
}
final public class CancellableAsyncState<Task> : @unchecked Swift.Sendable where Task : _MapboxNavigationHelpers.CancellableAsyncStateValue {
  public init()
  final public func activate(with task: Task)
  final public func cancel()
  @objc deinit
}
extension Combine.AnyCancellable : _MapboxNavigationHelpers.CancellableAsyncStateValue {
}
@available(iOS, deprecated: 15.0, message: "Back ported version isn't needed since iOS 15")
extension Combine.Publisher {
  public var values: _Concurrency.AsyncThrowingStream<Self.Output, any Swift.Error> {
    get
  }
}
@available(iOS, deprecated: 15.0, message: "Back ported version isn't needed since iOS 15")
extension Combine.Publisher where Self.Failure == Swift.Never {
  public var values: _Concurrency.AsyncStream<Self.Output> {
    get
  }
}
@propertyWrapper final public class EventPublisher<Event> : @unchecked Swift.Sendable where Event : Swift.Sendable {
  final public let wrappedValue: Combine.AnyPublisher<Event, Swift.Never>
  final public func emit(_ event: Event)
  public init()
  @objc deinit
}
extension _MapboxNavigationHelpers.EventPublisher where Event == () {
  @inlinable final public func emit() {
        emit(())
    }
}
@propertyWrapper final public class CurrentValuePublisher<Event> : @unchecked Swift.Sendable where Event : Swift.Sendable {
  final public let wrappedValue: Combine.AnyPublisher<Event, Swift.Never>
  final public var value: Event {
    get
  }
  final public func emit(_ event: Event)
  public init(_ event: Event)
  @objc deinit
}
final public class Locked<Value, Lock> : @unchecked Swift.Sendable where Lock : Foundation.NSLocking {
  public init(_ wrappedValue: Value, lock: Lock)
  final public func read() -> Value
  final public func read<Output>(_ protectedBlock: (Value) throws -> Output) rethrows -> Output
  final public func read<Output>(_ keyPath: Swift.KeyPath<Value, Output>) -> Output
  final public func update(_ newValue: Value)
  final public func mutate<Output>(_ mutation: (inout Value) throws -> Output) rethrows -> Output
  @objc deinit
}
extension Foundation.NSLocking {
  public func callAsFunction<ReturnValue>(_ block: () throws -> ReturnValue) rethrows -> ReturnValue
}
public typealias NSLocked<Value> = _MapboxNavigationHelpers.Locked<Value, Foundation.NSLock>
extension _MapboxNavigationHelpers.Locked where Lock == Foundation.NSLock {
  convenience public init(_ wrappedValue: Value)
}
public func onMainAsync(_ work: @escaping @_Concurrency.MainActor @Sendable () -> Swift.Void)
public func onMainQueueSync<T>(execute work: @_Concurrency.MainActor () throws -> T) rethrows -> T
final public class QueueGuard<Value> : @unchecked Swift.Sendable {
  public init(_ initialValue: Value, queueLabel: Swift.String, target: Dispatch.DispatchQueue? = nil)
  final public func async<Output>(_ exclusiveAccessBlock: @escaping @Sendable (inout Value) -> Output) async -> Output
  final public func async<Output>(_ exclusiveAccessBlock: @escaping @Sendable (inout Value) throws -> Output) async throws -> Output
  final public func sync<Output>(_ exclusiveAccessBlock: @Sendable (inout Value) throws -> Output) rethrows -> Output
  @objc deinit
}
@dynamicMemberLookup public struct UncheckedSendable<Value> : @unchecked Swift.Sendable {
  public var value: Value
  public init(_ value: Value)
  public subscript<Subject>(dynamicMember keyPath: Swift.KeyPath<Value, Subject>) -> Subject {
    get
  }
}
final public class UnfairLock : Foundation.NSLocking, Swift.Sendable {
  public init()
  @objc deinit
  @objc final public func lock()
  @objc final public func unlock()
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.UnsafeMutablePointer : @unchecked Swift.Sendable where Pointee == Darwin.os_unfair_lock_s {
}
#else
extension Swift.UnsafeMutablePointer : @unchecked Swift.Sendable where Pointee == Darwin.os_unfair_lock_s {
}
#endif
public typealias UnfairLocked<Value> = _MapboxNavigationHelpers.Locked<Value, _MapboxNavigationHelpers.UnfairLock>
extension _MapboxNavigationHelpers.Locked where Lock == _MapboxNavigationHelpers.UnfairLock {
  convenience public init(_ wrappedValue: Value)
}
extension CoreFoundation.CGPoint {
  public func distance(to: CoreFoundation.CGPoint) -> CoreFoundation.CGFloat
}
extension Swift.Collection {
  public subscript(safe index: Self.Index) -> Self.Element? {
    get
  }
}
extension Foundation.DateComponentsFormatter {
  public static let fullDateComponentsFormatter: Foundation.DateComponentsFormatter
  public static let noCommaShortDateComponentsFormatter: Foundation.DateComponentsFormatter
  public static let briefDateComponentsFormatter: Foundation.DateComponentsFormatter
  public static func travelDurationUnitStyle(interval: Foundation.TimeInterval) -> Foundation.DateComponentsFormatter.UnitsStyle
  public static func travelTimeString(_ interval: Foundation.TimeInterval, signed: Swift.Bool, allowedUnits: Foundation.NSCalendar.Unit? = nil, unitStyle: Foundation.DateComponentsFormatter.UnitsStyle? = nil) -> Swift.String
}
extension Swift.String {
  public func firstCapitalized() -> Swift.String
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func autoresizing() -> Self
  @_Concurrency.MainActor @preconcurrency public func pinEdgesToSuperview(padding: CoreFoundation.CGFloat = 0, respectingSafeArea safeArea: Swift.Bool = false)
}
extension UIKit.NSLayoutConstraint {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func assign(to variable: inout UIKit.NSLayoutConstraint!) -> Self
}
@_documentation(visibility: internal) public protocol Anchorable {
  @_Concurrency.MainActor var topAnchor: UIKit.NSLayoutYAxisAnchor { get }
  @_Concurrency.MainActor var bottomAnchor: UIKit.NSLayoutYAxisAnchor { get }
  @_Concurrency.MainActor var leftAnchor: UIKit.NSLayoutXAxisAnchor { get }
  @_Concurrency.MainActor var rightAnchor: UIKit.NSLayoutXAxisAnchor { get }
  @_Concurrency.MainActor var leadingAnchor: UIKit.NSLayoutXAxisAnchor { get }
  @_Concurrency.MainActor var trailingAnchor: UIKit.NSLayoutXAxisAnchor { get }
}
extension UIKit.UIView : _MapboxNavigationHelpers.Anchorable {
}
extension UIKit.UILayoutGuide : _MapboxNavigationHelpers.Anchorable {
}
extension UIKit.UIColor {
  convenience public init(rgb: Swift.Int, alpha: CoreFoundation.CGFloat = 1.0)
  public var hexString: Swift.String? {
    get
  }
}
extension UIKit.UIColor {
  public func image(_ size: CoreFoundation.CGSize = .zero) -> UIKit.UIImage
}
extension SwiftUICore.ColorScheme {
  public var traitCollection: UIKit.UITraitCollection {
    get
  }
}
extension UIKit.UITraitCollection {
  public var colorScheme: SwiftUICore.ColorScheme {
    get
  }
}
extension UIKit.UIView {
  @inlinable @inline(__always) @_Concurrency.MainActor @preconcurrency public func forEachSubview(action: @escaping (UIKit.UIView) -> Swift.Void) {
        var queue: [UIView] = [self]

        while !queue.isEmpty {
            let view = queue.removeFirst()

            action(view)

            for subview in view.subviews {
                queue.append(subview)
            }
        }
    }
}
@discardableResult
@inlinable public func with<Value>(_ value: Value, modify: (inout Value) throws -> Swift.Void) rethrows -> Value {
    var value = value
    try modify(&value)
    return value
}
